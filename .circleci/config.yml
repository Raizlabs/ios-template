version: 2.1

jobs:
  danger:
    executor: xcode-10
    steps:
      - setup
      - run:
          name: Tests
          command: |
            cd PRODUCTNAME/app
            bundle exec fastlane test
      - run:
          name: Code Coverage
          when: always
          command: |
            cd PRODUCTNAME/app
            bundle exec fastlane coverage
      # Store xcov Code Coverage HTML report artifact
      - store_artifacts:
          path: /Users/distiller/project/PRODUCTNAME/app/build/xcov
          destination: xcov
      - store_artifacts:
          path: /Users/distiller/project/PRODUCTNAME/app/build/slather
          destination: slather
      - store_artifacts:
          path: /Users/distiller/project/PRODUCTNAME/app/build/scan
          destination: scan
      # Update Danger as soon as we have code coverage/tests, while waiting for screenshots to be generated
      - run:
          name: Danger
          when: always
          command: |
            bundle exec danger --dangerfile=PRODUCTNAME/Dangerfile
      - run:
          name: Upload to Codecov
          when: always
          command: bash <(curl -s https://codecov.io/bash) -f PRODUCTNAME/app/build/slather/cobertura.xml -X coveragepy -X gcov -X xcode
      - run:
          name: Screenshots
          when: always
          command: |
            cd PRODUCTNAME/app
            bundle exec fastlane snapshot
      - store_artifacts:
          path: /Users/distiller/project/PRODUCTNAME/app/fastlane/screenshots
          destination: screenshots
      # Run Danger again once screenshots are complete
      - run:
          name: Danger
          when: always
          command: |
            bundle exec danger --dangerfile=PRODUCTNAME/Dangerfile
      - run:
          name: Post Screenshots to Slack
          when: always
          command: |
            cd PRODUCTNAME/app
            bundle exec fastlane slackshots

  test-xcode-10-2:
    executor: xcode-10
    steps:
      - setup
      # Setup Python dependencies
      - restore_cache:
          key: 5-python-requirements-{{ checksum "requirements.txt" }}
      - run:
          name: Restore Python Packages
          command: |
            [[ -d .venv ]] || virtualenv .venv
            source .venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: 5-python-requirements-{{ checksum "requirements.txt" }}
          paths:
            - "/Users/distiller/project/.venv"
      # Restore Pods cache
      - restore_cache:
          key: 3-pods-{{ checksum "./PRODUCTNAME/app/Podfile.lock" }}
      # Run tests
      - run:
          name: Test Pre-generated Cookiecutter Template
          command: |
            source .venv/bin/activate
            echo Testing branch ${CIRCLE_BRANCH}
            cookiecutter --no-input ./
            cd ProjectName/app
            bundle install
            bundle exec fastlane test
      - run:
          name: Test Template Generation from PRODUCTNAME Directory
          command: |
            source .venv/bin/activate
            KEEP_COOKIECUTTER_OUTPUT=true ./generate_template.sh
      - run:
          name: Verify cookiecutter matches PRODUCTNAME
          command: test `git status -s \{\{\ cookiecutter.project_name\ \|\ replace\(\'\ \'\,\ \'\'\)\ \}\}/ | wc -l` -eq 0
      # Cache Pods
      - save_cache:
          key: 3-pods-{{ checksum "./PRODUCTNAME/app/Podfile.lock" }}
          paths:
            - "/Users/distiller/Library/Caches/CocoaPods"
      # Adds SSH key for deploying result to ios-template-output repo
      - add_ssh_keys:
          fingerprints:
            - "33:4f:93:81:10:0e:18:95:86:a8:92:e6:eb:ee:39:92"
      # This allows us to test that the inner CircleCI template is valid by pushing to another remote repo
      # Note: we must delete the Pods folder because otherwise "git add -A" crashes due to OOM.
      - run:
          name: Deploy template to ios-template-output repo
          command: |
            cd ProjectName/app
            rm -rf Pods
            bundle exec pod install
            git add -A
            export COMMIT_MSG="\"https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\""
            git commit -m $COMMIT_MSG
            git remote add output git@github.com:Raizlabs/ios-template-output.git
            export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_334f9381100e189586a892e6ebee3992'
            git push -u output master:${CIRCLE_BRANCH} --force

executors:
  xcode-10:
    working_directory: /Users/distiller/project
    macos:
      xcode: "10.2.1"
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      FL_OUTPUT_DIR: /Users/distiller/project/output
      DISABLE_COVERALLS: true
      BUNDLE_PATH: /Users/distiller/project/PRODUCTNAME/app/build/gems
    shell: /bin/bash --login -eo pipefail

commands:
  setup:
    description: "Shared setup"
    steps:
      - checkout
      - restore-gems
      # Make sure that the output directory exists
      - run: mkdir $FL_OUTPUT_DIR

  restore-gems:
    description: "Restore Ruby Gems"
    steps:
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.5" > ~/.ruby-version
      - restore_cache:
          key: 2-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install
      - run:
          name: Update Gemfile
          command: |
            cd PRODUCTNAME
            bundle check || bundle install
      - save_cache:
          key: 2-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - /Users/distiller/project/PRODUCTNAME/app/build/gems


workflows:
  version: 2
  test-all:
    jobs:
      - danger
      - test-xcode-10-2
